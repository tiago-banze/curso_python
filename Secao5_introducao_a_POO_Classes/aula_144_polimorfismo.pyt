# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.
# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
from abc import ABC, abstractmethod

class Notificacao(ABC):
    def __init__(self,mensagem)-> None:
        self.mensagem =mensagem
        
    @abstractmethod    
    def enviar(self) -> bool:
        pass
    
class NotificacaoEmail(Notificacao):
    def enviar(self)-> bool:
        print("E-mail: enviando:", self.mensagem)
        return True
        
class NotificacaoSMS(Notificacao):   
    def enviar(self)-> bool:
        print("SMS: enviando:", self.mensagem)
        
def notificar(notificacao: Notificacao):
    notificacao_enviada = notificacao.enviar()
    
    if notificacao_enviada:
        print("Notifica√ß√£o Enviada")
    else:
        print("Notifica√ß√£o N√£o Enviada")
    
mensagem_email = NotificacaoEmail("testando Email")
mensagem_SMS = NotificacaoSMS("testando SMS")
notificar(mensagem_email)
notificar(mensagem_SMS)